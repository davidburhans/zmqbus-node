// Generated by CoffeeScript 1.7.1
(function() {
  var Elector, EventEmitter, dgram, lpad, typeIsArray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dgram = require('dgram');

  EventEmitter = require('events').EventEmitter;

  typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  lpad = function(value, padding) {
    var i, zeroes, _i;
    zeroes = '0';
    for (i = _i = 1; 1 <= padding ? _i <= padding : _i >= padding; i = 1 <= padding ? ++_i : --_i) {
      zeroes += '0';
    }
    return (zeroes + value).slice(padding * -1);
  };

  Elector = (function(_super) {
    __extends(Elector, _super);

    function Elector(options, metadata) {
      var val;
      this.options = options;
      this.metadata = metadata != null ? metadata : {};
      val = Math.floor(Math.random() * 1024 * 1024);
      this.id = (lpad(99 - this.options.election_priority, 2)) + (lpad(val, 8));
      this.metadata.id = this.id;
      this.elect_last = {
        id: ''
      };
      this.election_in_progress = false;
      this.elect_state = 0;
      this.last_hb_time = 0;
      this.sock = dgram.createSocket('udp4');
      this.sock.on('error', function(err) {
        return this.emit('error', err);
      });
      this.sock.on('message', (function(_this) {
        return function(msg, rinfo) {
          var e;
          try {
            return _this.process_msg(JSON.parse(msg.toString()), rinfo);
          } catch (_error) {
            e = _error;
          }
        };
      })(this));
      this.sock.bind(this.options.multicast_port, '0.0.0.0', (function(_this) {
        return function() {
          _this.sock.setBroadcast(true);
          if (_this.options.multicast_addr !== '255.255.255.255') {
            _this.sock.addMembership(_this.options.multicast_addr);
          }
          return _this.emit('ready', _this, _this.sock.address());
        };
      })(this));
    }

    Elector.prototype.broadcast = function(advert) {
      var msg;
      if (!this.sock) {
        return;
      }
      msg = new Buffer(JSON.stringify(advert));
      return this.sock.send(msg, 0, msg.length, this.options.multicast_port, this.options.multicast_addr);
    };

    Elector.prototype.process_msg = function(msg, rinfo) {
      if (!typeIsArray(msg || msg.length < 2)) {
        return;
      }
      switch (msg[0]) {
        case 'hb':
          if (this.elect_last.id === msg[1]) {
            this.last_hb_time = new Date().getTime();
          }
          return;
        case 'elect':
          return this.on_elect_msg(msg.slice(1));
        default:
          return;
      }
      return this.emit('message', msg, rinfo);
    };

    Elector.prototype.on_elect_msg = function(msg) {
      if (msg[0] === 'start') {
        this.election_in_progress = true;
        return this.broadcast(['elect', 'candidate', this.metadata, this.elect_last]);
      } else if (msg[0] === 'candidate' && this.elector) {
        if (msg[1].id < this.elect_candidate.id) {
          this.elect_candidate = msg[1];
        }
        if (!this.elect_last.id) {
          this.elect_last = msg[2];
        }
        if (msg[1].id === this.elect_last.id) {
          return this.elect_last_seen = true;
        }
      } else if (msg[0] === 'winner') {
        this.elect_last = msg[1];
        this.election_in_progress = false;
        if (this.elect_last.id === this.id) {
          clearInterval(this.hb_handle);
          this.hb_handle = setInterval((function(_this) {
            return function() {
              return _this.broadcast(['hb', _this.id]);
            };
          })(this), this.options.heartbeat_period);
        }
        return this.emit('elected', this.elect_last);
      } else if (msg[0] === 'same') {
        return this.election_in_progress = false;
      }
    };

    Elector.prototype.start = function() {
      var checkHeartbeat;
      checkHeartbeat = (function(_this) {
        return function() {
          var delta;
          delta = new Date().getTime() - _this.last_hb_time;
          if (delta >= _this.options.heartbeat_timeout) {
            return _this.start_election();
          }
        };
      })(this);
      checkHeartbeat();
      return this.checkHeartbeatHandle = setInterval(checkHeartbeat, this.options.heartbeat_period);
    };

    Elector.prototype.stop = function() {
      clearInterval(this.checkHeartbeatHandle);
      this.checkHeartbeatHandle = null;
      this.sock.close();
      return this.sock = null;
    };

    Elector.prototype.start_election = function() {
      if (this.election_in_progress) {
        return;
      }
      this.broadcast(['elect', 'start']);
      this.elector = true;
      this.elect_candidate = this.metadata;
      this.elect_last_seen = false;
      return setTimeout((function(_this) {
        return function() {
          if (_this.elect_last.id !== _this.elect_candidate.id && !_this.elect_last_seen) {
            _this.broadcast(['elect', 'winner', _this.elect_candidate]);
            _this.elect_last = _this.elect_candidate;
          } else {
            _this.broadcast(['elect', 'winner', _this.elect_last]);
          }
          return _this.elector = false;
        };
      })(this), this.options.election_timeout);
    };

    return Elector;

  })(EventEmitter);

  exports.Elector = Elector;

}).call(this);
